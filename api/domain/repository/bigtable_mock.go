// Code generated by MockGen. DO NOT EDIT.
// Source: bigtable.go

// Package repository is a generated GoMock package.
package repository

import (
	bigtable "cloud.google.com/go/bigtable"
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/takashabe/btcli/api/domain"
	reflect "reflect"
)

// MockBigtable is a mock of Bigtable interface
type MockBigtable struct {
	ctrl     *gomock.Controller
	recorder *MockBigtableMockRecorder
}

// MockBigtableMockRecorder is the mock recorder for MockBigtable
type MockBigtableMockRecorder struct {
	mock *MockBigtable
}

// NewMockBigtable creates a new mock instance
func NewMockBigtable(ctrl *gomock.Controller) *MockBigtable {
	mock := &MockBigtable{ctrl: ctrl}
	mock.recorder = &MockBigtableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBigtable) EXPECT() *MockBigtableMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBigtable) Get(ctx context.Context, table, key string, opts ...bigtable.ReadOption) (*domain.Bigtable, error) {
	varargs := []interface{}{ctx, table, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*domain.Bigtable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBigtableMockRecorder) Get(ctx, table, key interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, table, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBigtable)(nil).Get), varargs...)
}

// GetRows mocks base method
func (m *MockBigtable) GetRows(ctx context.Context, table string, rr bigtable.RowRange, opts ...bigtable.ReadOption) (*domain.Bigtable, error) {
	varargs := []interface{}{ctx, table, rr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRows", varargs...)
	ret0, _ := ret[0].(*domain.Bigtable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRows indicates an expected call of GetRows
func (mr *MockBigtableMockRecorder) GetRows(ctx, table, rr interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, table, rr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockBigtable)(nil).GetRows), varargs...)
}

// GetRowsWithPrefix mocks base method
func (m *MockBigtable) GetRowsWithPrefix(ctx context.Context, table, key string, opts ...bigtable.ReadOption) (*domain.Bigtable, error) {
	varargs := []interface{}{ctx, table, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRowsWithPrefix", varargs...)
	ret0, _ := ret[0].(*domain.Bigtable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRowsWithPrefix indicates an expected call of GetRowsWithPrefix
func (mr *MockBigtableMockRecorder) GetRowsWithPrefix(ctx, table, key interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, table, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowsWithPrefix", reflect.TypeOf((*MockBigtable)(nil).GetRowsWithPrefix), varargs...)
}

// Count mocks base method
func (m *MockBigtable) Count(ctx context.Context, table string) (int, error) {
	ret := m.ctrl.Call(m, "Count", ctx, table)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockBigtableMockRecorder) Count(ctx, table interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBigtable)(nil).Count), ctx, table)
}

// Tables mocks base method
func (m *MockBigtable) Tables(ctx context.Context) ([]string, error) {
	ret := m.ctrl.Call(m, "Tables", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tables indicates an expected call of Tables
func (mr *MockBigtableMockRecorder) Tables(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tables", reflect.TypeOf((*MockBigtable)(nil).Tables), ctx)
}
