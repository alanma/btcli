// Code generated by MockGen. DO NOT EDIT.
// Source: bigtable.go

// Package bigtable is a generated GoMock package.
package bigtable

import (
	bigtable "cloud.google.com/go/bigtable"
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// OutStream mocks base method
func (m *MockClient) OutStream() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutStream")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// OutStream indicates an expected call of OutStream
func (mr *MockClientMockRecorder) OutStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutStream", reflect.TypeOf((*MockClient)(nil).OutStream))
}

// ErrStream mocks base method
func (m *MockClient) ErrStream() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrStream")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// ErrStream indicates an expected call of ErrStream
func (mr *MockClientMockRecorder) ErrStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrStream", reflect.TypeOf((*MockClient)(nil).ErrStream))
}

// Get mocks base method
func (m *MockClient) Get(ctx context.Context, table, key string, opts ...bigtable.ReadOption) (*Bigtable, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, table, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Bigtable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(ctx, table, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, table, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), varargs...)
}

// GetRows mocks base method
func (m *MockClient) GetRows(ctx context.Context, table string, rr bigtable.RowRange, opts ...bigtable.ReadOption) (*Bigtable, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, table, rr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRows", varargs...)
	ret0, _ := ret[0].(*Bigtable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRows indicates an expected call of GetRows
func (mr *MockClientMockRecorder) GetRows(ctx, table, rr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, table, rr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockClient)(nil).GetRows), varargs...)
}

// Count mocks base method
func (m *MockClient) Count(ctx context.Context, table string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, table)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockClientMockRecorder) Count(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClient)(nil).Count), ctx, table)
}

// Tables mocks base method
func (m *MockClient) Tables(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tables", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tables indicates an expected call of Tables
func (mr *MockClientMockRecorder) Tables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tables", reflect.TypeOf((*MockClient)(nil).Tables), ctx)
}
